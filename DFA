//Q: set that holds the states
//Sigma: set that holds the alphabet
//Delta: Transition Function [Q X Sigma -> Q]
//q0: start state
//F: set that holds the accept states (final states)

//Program receives formal description of DFA: M=(Q,Sigma,Delta,q0,F)
/*Program asks for string w on alphabet Sigma and decides weather w 
is accepted by M or not.*/

//program should/could generate corresponding state diagram

//example of language M (in page 37 and 38 of book)
//Q = {q1,q2,q3}
//Sigma={0,1}
/*Delta= 
__| 0  1
q1|q1 q2
q2|q3 q2
q3|q2 q2
*/
//q1 is start state
//F={q2}

#include <iostream>
#include <fstream>
#include <string>
#include <cstring>
#include<sstream>
#include<set>

using namespace std;

int main()
{
    ifstream file;
    string w;
    string value;
    set<string> states; //set that holds states
    set<string> alphabet; //set that holds alphabet
    set<string> finalstates; //set that holds final states
    //transition function - map,set,graph
    string currentstate;
    string startstate; //start state
    
    string **array; //transition function
    int rows=0; //future rows of 'array'
    int columns=0; //future columns of 'array'
    int h;
    int l;
    
    //the following three variables are used for reading the transition function line
    string node1; //node1 goes to node2. 
    string node2; //node1 and node2 hold the name of the particular state.
    string condition; //condition for node1 to go to node2
    
    //char language; //file with the specified language
    string line; //to keep track of what line you're in
    
    cout<<"\nSpecify file which carries specification for the language of the DFA: ";
    //cin>>language;
      
    file.open("DFA_language1.txt");
    
    int i=1;
    
    /*if (!file.is_open()){
       cerr<< "The file did not open! :c"<< '\n';
       exit;
     }*/

    while(!file.eof())
    {             
       while(getline(file,line))
       {                   
       
       if(i==1) //set that holds states
       { 
          //tokenize string as well as put values into corresponding variable
          //see if this can be made into a function sense it is used 5 times
          stringstream lineStream(line);
          string token;
          while(lineStream >> token)
          {
              //save token in variable
              states.insert(token);
          }
          
          rows = states.size() + 1;
        }
        
       if(i==2) //set that holds the alphabet
       { 
          //tokenize string as well as put values into corresponding variable
          stringstream lineStream(line);
          string token;
          while(lineStream >> token)
          {
              alphabet.insert(token);
          }
          
          columns = alphabet.size() + 1;
        }
        
        if(i==3) //transition function
       {  
          //cout<<"\n i = 3";
          //NumOfStates: row
          //SizeOfSigma: column
          
          //this array declaration is only done once
          array = new string*[rows];
          //[SizeOfSigma]
         
          //getting the spaces in memory
             for (int row=0; row<rows; row++)
             {
                array[row] = new string[columns];
             }
             //t=2;

          //cout<<"\n before storing states";
          
          int b = 1; /*counter used in the following while to store values from the
                      set 'states' into the array 'array'*/
          set<string>::iterator stateIterator; //iterator to go through values in the set 'states'
          for(stateIterator = states.begin(); stateIterator != states.end(); stateIterator++) //assign states to first column of array
          {   //doesn't get to here
              //cout<<"\n inside state for";
              array[b][0] = *stateIterator;
              //cout<<"\n states array("<<b<<",0): "<<array[b][0];
              b++; 
          } //working
          
          //cout<<"\n after storing states";

          int c = 1;
          set<string>::iterator alphabetIterator; //iterator to go through values in the set 'alphabet'
          for(alphabetIterator = alphabet.begin(); alphabetIterator != alphabet.end(); alphabetIterator++) //assign alphabet to first row of array
          {
             //cout<<"\n inside alphabet for";
             array[0][c] = *alphabetIterator;
             //cout<<"\n alphabet array(0,"<<c<<"): "<<array[0][c];
             c++; 
          } //working
             
          //cout<<"\n after the array declaration";

          int j=0;

           while(j<line.length()) //reading the line ----- error is in here
          {  //cout<<"\n inside while of i=3";  //after 1 of this, program stops working
             node1 = line[j];
             j++;
             while(line[j] != '|') //info before the '|', a state
             {  //works
                /* http://www.dslreports.com/forum/r19270433-C-Concatenating-a-char-into-a-string */
                node1+=line[j]; //operator overloading
                j++;
             }
             j++;
             condition = line[j];
             j++;
             while(line[j] != '=') /*info between the '|' and the '=', the 
                                 condition for one state to go to another state*/
             {  //doesn't work -- ||#
                condition+=line[j];
                j++;
             }
             j++;
             node2 = line[j];
             j++;
             while(line[j] != ' ' && j<line.length()) /*info between the '=' and the empty space, a state*/
             {                      
                node2+=line[j];
                j++;
             }
             
             /*cout<<"\n node1="<<node1;
             cout<<"\n condition="<<condition;
             cout<<"\n node2="<<node2;
             
             cout<<"\n after reading";*/
             
             // (node1) --condition--> (node2)
             h=1; 
             while(h<rows) //check for state in first column of 'array'
             {
               /*cout<<"\n inside row while";
               cout<<"\n array("<<h<<",0)="<<array[h][0];*/
               if(array[h][0] == node1) //in second iteration of the while in i=3, this part is not done right
               {
                  break;
               }
               h++;
             }//ends
             l=1;
             while(l<columns) //check for condition in first row of 'array'
             {  
                /*cout<<"\n inside column while";
                cout<<"\n array(0,"<<l<<")="<<array[0][l];*/
                if(array[0][l] == condition) //in second iteration of the while in i=3, this part is not done right
                {
                   break;
                }
                l++;
             } //doesn't end?
             
             array[h][l] = node2;

             //cout<<"\n ("<<h<<","<<l<<"): "<<array[h][l]<<endl;
             
             /*
             Form of transition function
                0  1  2
              ---------
            0 |__| 0| 1
            1 |q1|q1 q2
            2 |q2|q3 q2
            3 |q3|q2 q2
             
             first row is for the alphabet
             first column is for the states
             the rest is the results
             */
             
             j++; //skip space
          }
        }
        
       if(i==4) //start state
       { 
          //tokenize string as well as put values into corresponding variable
          stringstream lineStream(line);
          string token;
          while(lineStream >> token)
          {
              //save token in variable
              startstate = token;
          }
        }
        
       if(i==5) //set that holds final states
       { 
          //tokenize string as well as put values into corresponding variable
          stringstream lineStream(line);
          string token;
          while(lineStream >> token)
          {
              finalstates.insert(token);
          }
        }
        
        if(i>5)
        {
           cout<<"too many fields.";
           break;
        }
        
        i++;
        }
    }
    
    //read string
    
    cout<<"\n\nIndicate string.";
    cin>>w;
    int k=0;
    
    //verify string
    
    currentstate = startstate;
    
    while(k<=w.size())
    {  //char character = w[k].c_str();
       cout<<"\n w.c_str()=:"<<w.c_str()<<endl;
       if(alphabet.find(w.c_str()) != alphabet.end()) //w[k].c_str() does not enter this while
       {  
          //continue with verification 
          h=1;
          while(h<rows)
          {
             if(array[h][0] == currentstate)
             {
                break;
             }
             h++;
          }
          l=1;
          while(l<columns)
          {
             if(array[0][l] == w.c_str())
             {
                break;
             }
             l++;
          }
          currentstate = array[h][l];
          
          k++;
       }
       else 
       { 
          cout<<"The string "<<w<<" is NOT accepted by the specified language. The character "<<w[k]<<" is not part of the alphabet.\n"; 
          break;
       }      
    }
    
    if(finalstates.find(currentstate) != finalstates.end())
    { 
       cout<<"The string "<<w<<" IS accepted by the specified language.\n"; 
    }
    else 
    { 
       cout<<"The string "<<w<<" is NOT accepted by the specified language. It did not end in a final state.\n"; 
    }  
    
    for (int row=0; row<rows; row++)
    {
       delete [] array[row];
    }
    delete [] array;
    
    file.close();

    system("pause");
    
    return 0;
}
