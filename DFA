//Q: set that holds the states
//Sigma: set that holds the alphabet
//Delta: Transition Function [Q X Sigma -> Q]
//q0: start state
//F: set that holds the accept states (final states)

//Program receives formal description of DFA: M=(Q,Sigma,Delta,q0,F)
/*Program asks for string w on alphabet Sigma and decides weather w 
is accepted by M or not.*/

//program should/could generate corresponding state diagram

//example of language M (in page 37 and 38 of book)
//Q = {q1,q2,q3}
//Sigma={0,1}
/*Delta= 
__| 0  1
q1|q1 q2
q2|q3 q2
q3|q2 q2
*/
//q1 is start state
//F={q2}

#include <iostream>
#include <fstream>
#include <string>
#include <cstring>
#include<sstream>
#include<set>

using namespace std;

int main()
{
    ifstream file;
    string w;
    string value;
    set<string> states; //set that holds states
    set<string> alphabet; //set that holds alphabet
    set<string> finalstates; //set that holds final states
    //transition function - map,set,graph
    string currentstate;
    string startstate; //start state
    
    int NumOfStates=0;
    int SizeOfSigma=0;
    
    //the following three variables are used for reading the transition function line
    string node1; //node1 goes to node2. 
    string node2; //node1 and node2 hold the name of the particular state.
    string condition; //condition for node1 to go to node2
    
    int g = 1; //for transition function array. 
    
    char language; //file with the specified language
    string line; //to keep track of what line you're in
    
    string **array;
    
    cout<<"Specify file which carries specification for the language of the DFA: ";
    //cin>>language;*/
      
    file.open("DFA_language1.txt");
    
    cout<<"\n TROLOLOLOLOOOOOOOOOL";
    
    int i=1;
    
    /*if (!file.is_open()){
       cerr<< "The file did not open! :c"<< '\n';
       exit;
     }*/

    cout<<"\n what cha doin?";

    while(!file.eof())
    {             
       while(getline(file,line))
       {
          cout<<"\n FUUUUUUU";                         
       
       if(i==1) //set that holds states
       { 
          cout<<"\n i = 1";
          //tokenize string as well as put values into corresponding variable
          //see if this can be made into a function sense it is used 5 times
          stringstream lineStream(line);
          string token;
          while(lineStream >> token)
          {
              //save token in variable
              states.insert(token);
          }
          
          NumOfStates = states.size();
        }
        
       if(i==2) //set that holds the alphabet
       { 
          cout<<"\n i = 2";
          //tokenize string as well as put values into corresponding variable
          stringstream lineStream(line);
          string token;
          while(lineStream >> token)
          {
              alphabet.insert(token);
          }
          
          SizeOfSigma = alphabet.size();
        }
        
        if(i==3) //transition function
       {  
          cout<<"\n i = 3";
          //NumOfStates: row; SizeOfSigma: column
          **array=array[NumOfStates][SizeOfSigma]; //http://www.gamedev.net/topic/468626-c-non-ms-compiler-testing-if-a-variable-exists/

          cout<<"\n after the array declaration";

          int j=0;

          while(j<line.length()) //while still in this line
          {  cout<<"\n inside while of i=3";  
             node1 = line[j];
          
             while(line[j] != '|') //info before the '|', a state
             {
                /* http://www.dslreports.com/forum/r19270433-C-Concatenating-a-char-into-a-string */
                node1+=line[j]; //operator overloading
                j++;
             }
             condition = line[j];
             while(line[j] != '=') /*info between the '|' and the '=', the 
                                 condition for one state to go to another state*/
             {
                condition+=line[j];
                j++;
             }
             node2 = line[j];
             while(line[j] != ' ') /*info between the '=' and the empty space,
                                     a state*/
             {
                node2+=line[j];
                j++;
             }
             
             // (node1) --condition--> (node2)
             array[0][g] = node1;
             array[g][0] = condition;
             array[g][g] = node2;
             
             /*
             Form of transition function
                0  1  2
              ---------
            0 |__| 0| 1
            1 |q1|q1 q2
            2 |q2|q3 q2
            3 |q3|q2 q2
             
             first row is for the alphabet
             first column is for the states
             the rest is the results
             */
             
             j++; //to skip the empty space
             g++; //for next space in transition function
          }
        }
        
       if(i==4) //start state
       { 
          cout<<"\n i = 4";
          //tokenize string as well as put values into corresponding variable
          stringstream lineStream(line);
          string token;
          while(lineStream >> token)
          {
              //save token in variable
              startstate = token;
          }
        }
        
       if(i==5) //set that holds final states
       { 
          cout<<"\n i = 5";
          //tokenize string as well as put values into corresponding variable
          stringstream lineStream(line);
          string token;
          while(lineStream >> token)
          {
              finalstates.insert(token);
          }
        }
        
        if(i>5)
        {
           cout<<"\n twas greater than 5 lines";       
        
           cout<<"too many fields.";
           break;
        }
        
        i++;
        }
    }
    
    //read string
    
    cout<<"Indicate string.";
    cin>>w;
    int k=0;
    
    //verify string
    
    currentstate = startstate;
    
    while(k<=w.size())
    {  //char character = w[k].c_str();
       if(alphabet.find(w.c_str()) != alphabet.end()) //w[k].c_str()
       { 
          //continue with verification 
          int h=0;
          while(h<=NumOfStates)
          {
             if(array[h][1] == currentstate)
             {
                break;
             }
             h++;
          }
          int l=0;
          while(l<=SizeOfSigma)
          {
             if(array[1][l] == w.c_str())
             {
                break;
             }
             l++;
          }
          currentstate = array[h][l];
          
          k++;
       }
       else 
       { 
          cout<<"The string "<<w<<" is NOT accepted by the specified language. The character "<<w[k]<<" is not part of the alphabet.\n"; 
          break;
       }      
    }
    
    if(finalstates.find(currentstate) != finalstates.end())
    { 
       cout<<"The string "<<w<<" IS accepted by the specified language.\n"; 
    }
    else 
    { 
       cout<<"The string "<<w<<" is NOT accepted by the specified language. It did not end in a final state.\n"; 
    }  
    
    file.close();

    system("pause");
    
    return 0;
}
